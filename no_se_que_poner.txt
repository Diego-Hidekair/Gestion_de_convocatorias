salia otro error, lo devolvi a  como estaba el codigo ya que con ese codigo funciona bien el cambio de estado de la convocatoria, pero solo quisiera agregar la opcion de agregar un comentario si el estado se cambia a 'observado'.
podemos hacer eso ? , que solucion  puede haber y me compartes le codigo corregido por favor ? :
aqui esta el backend:
// backend/controllers/convocatoriaController.js
const pool = require('../db');

// Obtener todas las convocatorias
const getConvocatorias = async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT  
                c.id_convocatoria, 
                c.nombre, 
                c.fecha_inicio, 
                c.fecha_fin, 
                c.id_usuario, 
                c.estado,
                tc.nombre_convocatoria AS nombre_tipoconvocatoria, 
                p.nombre_carrera AS nombre_programa,  
                f.nombre_facultad AS nombre_facultad,  
                u.nombres AS nombre_usuario,  
                d.documento_path  
            FROM convocatorias c
            LEFT JOIN tipos_convocatorias tc ON c.id_tipoconvocatoria = tc.id_tipoconvocatoria
            LEFT JOIN public.alm_programas p ON c.id_programa = p.id_programa 
            LEFT JOIN public.alm_programas_facultades f ON c.id_facultad = f.id_facultad  
            LEFT JOIN usuarios u ON c.id_usuario = u.id_usuario
            LEFT JOIN documentos d ON d.id_convocatoria = c.id_convocatoria
            ORDER BY c.id_convocatoria
        `);
        res.json(result.rows);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// Obtener convocatorias por facultad y estado
const getConvocatoriasByFacultadAndEstado = async (req, res) => {
    const { estado } = req.params;
    const { id_facultad } = req.user;

    if (!id_facultad) {
        return res.status(400).json({ error: 'El usuario logeado no tiene un id_facultad asociado.' });
    }

    try {
        const result = await pool.query(`
            SELECT 
                c.id_convocatoria, 
                c.nombre, 
                c.fecha_inicio, 
                c.fecha_fin, 
                c.estado,
                tc.nombre_convocatoria AS nombre_tipoconvocatoria, 
                p.nombre_carrera AS nombre_programa,  
                f.nombre_facultad AS nombre_facultad,  
                u.nombres AS nombre_usuario,  
                d.documento_path  
            FROM convocatorias c
            LEFT JOIN tipos_convocatorias tc ON c.id_tipoconvocatoria = tc.id_tipoconvocatoria
            LEFT JOIN public.alm_programas p ON c.id_programa = p.id_programa
            LEFT JOIN public.alm_programas_facultades f ON c.id_facultad = f.id_facultad  
            LEFT JOIN usuarios u ON c.id_usuario = u.id_usuario
            LEFT JOIN documentos d ON d.id_convocatoria = c.id_convocatoria
            WHERE f.id_facultad = $1 AND c.estado = $2
        `, [id_facultad, estado]);

        res.json(result.rows);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

const getConvocatoriasByFacultad = async (req, res) => {// Mostrar convocatorias por facultad (solo usuario con rol el "secretaria")
    const { id_facultad } = req.user;
    if (!id_facultad) {
        return res.status(400).json({ error: 'El usuario logeado no tiene un id_facultad asociado.' });
    }

    try {
        const result = await pool.query(`
            SELECT 
                c.id_convocatoria, 
                c.nombre, 
                c.fecha_inicio, 
                c.fecha_fin, 
                c.estado,
                tc.nombre_convocatoria AS nombre_tipoconvocatoria, 
                p.nombre_carrera AS nombre_programa,  
                f.nombre_facultad AS nombre_facultad,  
                u.nombres AS nombre_usuario,  
                d.documento_path  
            FROM convocatorias c
            LEFT JOIN tipos_convocatorias tc ON c.id_tipoconvocatoria = tc.id_tipoconvocatoria
            LEFT JOIN public.alm_programas p ON c.id_programa = p.id_programa
            LEFT JOIN public.alm_programas_facultades f ON c.id_facultad = f.id_facultad  
            LEFT JOIN usuarios u ON c.id_usuario = u.id_usuario
            LEFT JOIN documentos d ON d.id_convocatoria = c.id_convocatoria
            WHERE f.id_facultad = $1
        `, [id_facultad]);

        res.json(result.rows);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

const getConvocatoriaById = async (req, res) => {// Obtener convocatoria por la id
    const { id } = req.params;
    try {
        const result = await pool.query(`
            SELECT 
                c.id_convocatoria, 
                c.nombre, 
                c.fecha_inicio, 
                c.fecha_fin, 
                c.estado,
                tc.nombre_convocatoria AS nombre_tipoconvocatoria, 
                p.nombre_carrera AS nombre_programa,
                f.nombre_facultad AS nombre_facultad,
                u.nombres AS nombre_usuario,
                d.documento_path
            FROM convocatorias c
            LEFT JOIN tipos_convocatorias tc ON c.id_tipoconvocatoria = tc.id_tipoconvocatoria
            LEFT JOIN public.alm_programas p ON c.id_programa = p.id_programa
            LEFT JOIN public.alm_programas_facultades f ON c.id_facultad = f.id_facultad
            LEFT JOIN usuarios u ON c.id_usuario = u.id_usuario
            LEFT JOIN documentos d ON d.id_convocatoria = c.id_convocatoria
            WHERE c.id_convocatoria = $1
        `, [id]);

        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Convocatoria no encontrada' });
        }
        res.json(result.rows[0]);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

const getConvocatoriasByEstado = async (req, res) => {// categorizar las convocatorias por estado
    const { estado } = req.params;
    try {
        const result = await pool.query(
            `SELECT * FROM convocatorias WHERE estado = $1`, [estado]
        );
        res.json(result.rows);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

const createConvocatoria = async (req, res) => {
    console.log("Datos recibidos:", req.body);
    try {
        const id_usuario = req.user.id;
        const id_facultad = req.user.id_facultad; 
        const { horario, nombre, fecha_inicio, fecha_fin, id_tipoconvocatoria, id_programa, prioridad, gestion } = req.body;
        
        console.log("Datos del usuario logeado:", req.user);
        if (!nombre || !fecha_inicio || !fecha_fin || !id_tipoconvocatoria || !id_programa || !id_facultad || !prioridad || !gestion) {
            return res.status(400).json({ error: 'Todos los campos son requeridos' });
        }

        const result = await pool.query(`
            INSERT INTO convocatorias 
            (horario, nombre, fecha_inicio, fecha_fin, id_tipoconvocatoria, id_programa, id_facultad, id_usuario, prioridad, gestion) 
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) 
            RETURNING id_convocatoria, nombre, fecha_inicio, fecha_fin, id_usuario, estado
        `, [horario, nombre, fecha_inicio, fecha_fin, id_tipoconvocatoria, id_programa, id_facultad, id_usuario, prioridad, gestion]);

        res.status(201).json(result.rows[0]);
    } catch (error) {
        console.error('Error al crear la convocatoria:', error);
        res.status(500).send('Error al crear la convocatoria');
    }
}; 
    
// actualizar
const updateConvocatoria = async (req, res) => {
    const { id } = req.params;
    const { horario, nombre, fecha_inicio, fecha_fin, id_tipoconvocatoria, id_programa, id_facultad, prioridad, gestion } = req.body;
    try {
        const result = await pool.query(`
            UPDATE convocatorias 
            SET horario = $1, nombre = $2, fecha_inicio = $3, fecha_fin = $4, id_tipoconvocatoria = $5, id_programa = $6, id_facultad = $7, prioridad = $8, gestion = $9
            WHERE id_convocatoria = $10 
            RETURNING id_convocatoria, nombre, fecha_inicio, fecha_fin, estado
        `, [horario, nombre, fecha_inicio, fecha_fin, id_tipoconvocatoria, id_programa, id_facultad, prioridad, gestion, id]);

        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Convocatoria no encontrada' });
        }

        res.json(result.rows[0]);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

const updateEstadoConvocatoria = async (req, res) => {
    const { id } = req.params;
    const { estado, comentario_observado } = req.body;
    const { rol } = req.user;

    console.log("Rol del usuario:", rol); // Verificar el rol del usuario

    // Verificar que el rol sea "vicerrectorado" o "admin"
    if (rol !== 'vicerrectorado' && rol !== 'admin') {
        return res.status(403).json({ error: 'No tienes permisos para actualizar el estado de la convocatoria' });
    }

    // Validar que el estado sea uno de los permitidos
    const estadosPermitidos = ['Para Revisión', 'En Revisión', 'Observado', 'Revisado'];
    if (!estadosPermitidos.includes(estado)) {
        return res.status(400).json({ error: 'Estado no válido' });
    }

    try {
        let query = `
            UPDATE convocatorias 
            SET estado = $1  
            WHERE id_convocatoria = $2 
            RETURNING *`;

        const values = [estado, id];

        // Si el estado es "Observado", incluir el comentario
        if (estado === "Observado") {
            if (!comentario_observado) {
                return res.status(400).json({ error: 'Se requiere un comentario cuando el estado es "Observado".' });
            }
            query = `
                UPDATE convocatorias 
                SET estado = $1, comentario_observado = $2 
                WHERE id_convocatoria = $3 
                RETURNING *`;
            values.push(comentario_observado);
        }

        const result = await pool.query(query, values);

        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Convocatoria no encontrada' });
        }

        res.json(result.rows[0]);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

module.exports = {  getConvocatoriasByFacultad, updateEstadoConvocatoria, getConvocatorias, getConvocatoriaById, createConvocatoria, updateConvocatoria, getConvocatoriasByEstado, getConvocatoriasByFacultadAndEstado };



y este es el del frontend:
// frontend/src/components/ConvocatoriaList.js
import React, { useState, useEffect } from "react";
import axios from "axios";
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, IconButton, Paper, Typography, Box, TextField, MenuItem, Select, InputLabel, FormControl, Dialog, DialogTitle, DialogContent, DialogActions, Button, Modal, Snackbar, Alert } from "@mui/material";
import { Edit, Delete, Preview, Download, Search, Comment } from "@mui/icons-material";
import { useNavigate } from "react-router-dom";

const ConvocatoriaList = () => {
    const [convocatorias, setConvocatorias] = useState([]);
    const [filteredConvocatorias, setFilteredConvocatorias] = useState([]);
    const [searchQuery, setSearchQuery] = useState("");
    const [searchCategory, setSearchCategory] = useState("nombre");
    const [previewUrl, setPreviewUrl] = useState("");
    const [isPreviewModalOpen, setIsPreviewModalOpen] = useState(false);
    const [deleteModalOpen, setDeleteModalOpen] = useState(false);
    const [convocatoriaToDelete, setConvocatoriaToDelete] = useState(null);
    const [userRole, setUserRole] = useState("");
    const [snackbarOpen, setSnackbarOpen] = useState(false);
    const [snackbarMessage, setSnackbarMessage] = useState("");
    const [selectedEstado, setSelectedEstado] = useState(null);
    const [openEstadoMenu, setOpenEstadoMenu] = useState(false);
    const [comentarioModalOpen, setComentarioModalOpen] = useState(false);
    const [comentario, setComentario] = useState("");
    const [convocatoriaId, setConvocatoriaId] = useState(null);
    const navigate = useNavigate();

    useEffect(() => {
        const fetchConvocatorias = async () => {
            try {
                const response = await axios.get("http://localhost:5000/convocatorias");
                setConvocatorias(response.data);
                setFilteredConvocatorias(response.data);
            } catch (error) {
                console.error("Error fetching convocatorias:", error);
            }
        };

        const fetchUserRole = async () => {
            try {
                const token = localStorage.getItem('token');
                const response = await axios.get('http://localhost:5000/api/auth/me', {
                    headers: { Authorization: `Bearer ${token}` },
                });
                setUserRole(response.data.rol);
            } catch (error) {
                console.error('Error fetching user role:', error);
            }
        };

        fetchConvocatorias();
        fetchUserRole();
    }, []);

    const handleEstadoChange = async (id, newEstado) => {
        if (userRole !== "vicerrectorado" && userRole !== "admin") {
            setSnackbarMessage("No tiene el rol autorizado para modificar este estado.");
            setSnackbarOpen(true);
            return;
        }

        if (newEstado === "Observado") {
            setConvocatoriaId(id);
            setComentarioModalOpen(true); // Abrir modal para ingresar comentario
        } else {
            try {
                const token = localStorage.getItem("token");
                await axios.patch(
                    `http://localhost:5000/convocatorias/${id}/estado`,
                    { estado: newEstado },
                    {
                        headers: { Authorization: `Bearer ${token}` },
                    }
                );
                setConvocatorias(convocatorias.map(convocatoria =>
                    convocatoria.id_convocatoria === id ? { ...convocatoria, estado: newEstado } : convocatoria
                ));
                setSnackbarMessage("Estado actualizado correctamente.");
                setSnackbarOpen(true);
            } catch (error) {
                console.error("Error updating estado:", error);
                setSnackbarMessage("No se pudo actualizar el estado.");
                setSnackbarOpen(true);
            }
        }
    };

    const handleComentarioSubmit = async () => {
        try {
            const token = localStorage.getItem("token");
            await axios.patch(
                `http://localhost:5000/convocatorias/${convocatoriaId}/estado`,
                { estado: "Observado", comentario_observado: comentario },
                {
                    headers: { Authorization: `Bearer ${token}` },
                }
            );
            setConvocatorias(convocatorias.map(convocatoria =>
                convocatoria.id_convocatoria === convocatoriaId ? { ...convocatoria, estado: "Observado", comentario_observado: comentario } : convocatoria
            ));
            setSnackbarMessage("Estado y comentario actualizados correctamente.");
            setSnackbarOpen(true);
            setComentarioModalOpen(false);
            setComentario("");
        } catch (error) {
            console.error("Error updating estado y comentario:", error);
            setSnackbarMessage("No se pudo actualizar el estado y el comentario.");
            setSnackbarOpen(true);
        }
    };

    const handleComentarioClose = () => {
        setComentarioModalOpen(false);
        setComentario("");
    };

    const handleEdit = (id) => {
        navigate(`/convocatorias/edit/${id}`);
    };

    const handleDeleteClick = (id) => {
        setConvocatoriaToDelete(id);
        setDeleteModalOpen(true);
    };

    const handleDeleteConfirm = async () => {
        try {
            await axios.delete(`http://localhost:5000/convocatorias/${convocatoriaToDelete}`);
            const updatedConvocatorias = convocatorias.filter(
                (c) => c.id_convocatoria !== convocatoriaToDelete
            );
            setConvocatorias(updatedConvocatorias);
            setFilteredConvocatorias(updatedConvocatorias);
            setDeleteModalOpen(false);
            setSnackbarMessage("Convocatoria eliminada correctamente.");
            setSnackbarOpen(true);
        } catch (error) {
            console.error("Error deleting convocatoria:", error);
            setSnackbarMessage("Hubo un error al eliminar la convocatoria.");
            setSnackbarOpen(true);
        }
    };

    const handleDeleteCancel = () => {
        setConvocatoriaToDelete(null);
        setDeleteModalOpen(false);
    };

    const handlePreview = async (id) => {
        const token = localStorage.getItem("token");
        try {
            const response = await axios.get(`http://localhost:5000/pdf/combinado/ver/${id}`, {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
                responseType: "blob",
            });

            const pdfBlob = new Blob([response.data], { type: "application/pdf" });
            const pdfUrl = URL.createObjectURL(pdfBlob);
            setPreviewUrl(pdfUrl);
            setIsPreviewModalOpen(true);
        } catch (error) {
            console.error("Error al obtener el PDF:", error);
            setSnackbarMessage("No se pudo cargar el PDF. Verifica tu conexión o intenta más tarde.");
            setSnackbarOpen(true);
        }
    };

    const handleDownload = async (id) => {
        try {
            const response = await axios.get(
                `http://localhost:5000/pdf/download/${id}`,
                { responseType: "blob" }
            );
            const url = URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement("a");
            link.href = url;
            link.setAttribute("download", `documento_${id}.pdf`);
            document.body.appendChild(link);
            link.click();
            link.parentNode.removeChild(link);
        } catch (error) {
            console.error("Error descargando el documento:", error);
            setSnackbarMessage("Error al descargar el documento.");
            setSnackbarOpen(true);
        }
    };

    useEffect(() => {
        const filtered = convocatorias.filter((convocatoria) =>
            convocatoria[searchCategory]
                ?.toLowerCase()
                .includes(searchQuery.toLowerCase())
        );
        setFilteredConvocatorias(filtered);
    }, [searchQuery, searchCategory, convocatorias]);

    const getEstadoColor = (estado) => {
        switch (estado) {
            case "Para Revisión":
                return "#ffc107";
            case "En Revisión":
                return "#007bff";
            case "Observado":
                return "#dc3545";
            case "Revisado":
                return "#28a745";
            default:
                return "#6c757d";
        }
    };

    return (
        <>
            <Typography variant="h4" component="h1" gutterBottom>
                Lista de Convocatorias
            </Typography>
            <Box display="flex" justifyContent="center" alignItems="center" mb={2} gap={2}>
                <TextField
                    label="Buscar..."
                    variant="outlined"
                    size="small"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    InputProps={{
                        startAdornment: <Search color="disabled" />,
                    }}
                />
                <FormControl variant="outlined" size="small">
                    <InputLabel>Categoría</InputLabel>
                    <Select
                        value={searchCategory}
                        onChange={(e) => setSearchCategory(e.target.value)}
                        label="Categoría"
                    >
                        <MenuItem value="nombre">Nombre</MenuItem>
                        <MenuItem value="fecha_inicio">Fecha de Inicio</MenuItem>
                        <MenuItem value="nombre_programa">Carrera</MenuItem>
                        <MenuItem value="nombre_facultad">Facultad</MenuItem>
                    </Select>
                </FormControl>
            </Box>
            <TableContainer component={Paper}>
                <Table>
                    <TableHead>
                        <TableRow>
                            <TableCell>Nombre</TableCell>
                            <TableCell>Fecha Inicio</TableCell>
                            <TableCell>Fecha Fin</TableCell>
                            <TableCell>Estado</TableCell>
                            <TableCell>Comentario</TableCell>
                            <TableCell>Acciones</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {filteredConvocatorias.map((convocatoria) => (
                            <TableRow key={convocatoria.id_convocatoria}>
                                <TableCell>{convocatoria.nombre}</TableCell>
                                <TableCell>{convocatoria.fecha_inicio}</TableCell>
                                <TableCell>{convocatoria.fecha_fin}</TableCell>
                                <TableCell>
                                    <FormControl variant="outlined" size="small">
                                        <Select
                                            value={convocatoria.estado}
                                            onChange={(e) => handleEstadoChange(convocatoria.id_convocatoria, e.target.value)}
                                            style={{ backgroundColor: getEstadoColor(convocatoria.estado), color: "#fff" }}
                                        >
                                            <MenuItem value="Para Revisión">Para Revisión</MenuItem>
                                            <MenuItem value="En Revisión">En Revisión</MenuItem>
                                            <MenuItem value="Observado">Observado</MenuItem>
                                            <MenuItem value="Revisado">Revisado</MenuItem>
                                        </Select>
                                    </FormControl>
                                </TableCell>
                                <TableCell>
                                    {convocatoria.comentario_observado && (
                                        <IconButton
                                            style={{ color: "#007bff" }}
                                            onClick={() => {
                                                setComentario(convocatoria.comentario_observado);
                                                setComentarioModalOpen(true);
                                            }}
                                        >
                                            <Comment />
                                        </IconButton>
                                    )}
                                </TableCell>
                                <TableCell>
                                    <IconButton
                                        style={{ color: "#007bff" }}
                                        onClick={() => handlePreview(convocatoria.id_convocatoria)}
                                    >
                                        <Preview />
                                    </IconButton>
                                    <IconButton
                                        style={{ color: "#28a745" }}
                                        onClick={() => handleDownload(convocatoria.id_convocatoria)}
                                    >
                                        <Download />
                                    </IconButton>
                                    <IconButton
                                        style={{ color: "#ffc107" }}
                                        onClick={() => handleEdit(convocatoria.id_convocatoria)}
                                    >
                                        <Edit />
                                    </IconButton>
                                    <IconButton
                                        style={{ color: "#dc3545" }}
                                        onClick={() => handleDeleteClick(convocatoria.id_convocatoria)}
                                    >
                                        <Delete />
                                    </IconButton>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </TableContainer>
            <Modal open={isPreviewModalOpen} onClose={() => setIsPreviewModalOpen(false)}>
                <Box sx={{ width: "80%", margin: "auto", marginTop: "5%", bgcolor: "background.paper", p: 4 }}>
                    <iframe src={previewUrl} width="100%" height="600px" title="Vista previa del PDF" />
                </Box>
            </Modal>
            <Dialog open={deleteModalOpen} onClose={handleDeleteCancel}>
                <DialogTitle>Confirmar Eliminación</DialogTitle>
                <DialogContent>
                    <Typography>
                        ¿Estás seguro de que deseas eliminar esta convocatoria?
                    </Typography>
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleDeleteCancel} color="primary">
                        Cancelar
                    </Button>
                    <Button onClick={handleDeleteConfirm} color="secondary">
                        Eliminar
                    </Button>
                </DialogActions>
            </Dialog>
            <Dialog open={comentarioModalOpen} onClose={handleComentarioClose}>
                <DialogTitle>Agregar Comentario</DialogTitle>
                <DialogContent>
                    <TextField
                        autoFocus
                        margin="dense"
                        label="Comentario"
                        type="text"
                        fullWidth
                        variant="outlined"
                        value={comentario}
                        onChange={(e) => setComentario(e.target.value)}
                    />
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleComentarioClose} color="primary">
                        Cancelar
                    </Button>
                    <Button onClick={handleComentarioSubmit} color="primary">
                        Guardar
                    </Button>
                </DialogActions>
            </Dialog>
            <Snackbar
                open={snackbarOpen}
                autoHideDuration={6000}
                onClose={() => setSnackbarOpen(false)}
            >
                <Alert onClose={() => setSnackbarOpen(false)} severity="info" sx={{ width: '100%' }}>
                    {snackbarMessage}
                </Alert>
            </Snackbar>
        </>
    );
};

export default ConvocatoriaList;